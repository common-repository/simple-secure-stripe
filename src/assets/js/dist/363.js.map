{"version":3,"file":"363.js","mappings":"0MAYsBA,EAAAA,EAAAA,K,0BCAFC,E,QAAAA,IAAY,oB","sources":["webpack://simple-secure-stripe/./src/assets/js/integrations/WooCommerceBlocks/payment-methods/hooks/use-payment-request.js","webpack://simple-secure-stripe/./src/assets/js/integrations/WooCommerceBlocks/payment-methods/hooks/use-process-payment-intent.js"],"sourcesContent":["import {useState, useEffect, useRef, useCallback} from '@wordpress/element';\nimport {getIntermediateAddress, getRoute} from '../util';\nimport isShallowEqual from '@wordpress/is-shallow-equal';\nimport {\n\tgetDisplayItems,\n\tgetShippingOptions,\n\tgetSelectedShippingOption,\n\tisFieldRequired,\n\ttoCartAddress as mapToCartAddress\n} from \"../util\";\nimport apiFetch from \"@wordpress/api-fetch\";\n\nconst toCartAddress = mapToCartAddress();\n\nexport const usePaymentRequest = (\n\t{\n\t\tgetData,\n\t\tonClose,\n\t\tstripe,\n\t\tbilling,\n\t\tshippingData,\n\t\tsetPaymentMethod,\n\t\texportedValues,\n\t\tcanPay\n\t}) => {\n\n\tconst {shippingAddress, needsShipping, shippingRates} = shippingData;\n\tconst {billingData, cartTotalItems, currency, cartTotal} = billing;\n\tconst [paymentRequest, setPaymentRequest] = useState(null);\n\tconst paymentRequestOptions = useRef({});\n\tconst currentShipping = useRef(shippingData)\n\tconst currentBilling = useRef(billing);\n\n\tuseEffect(() => {\n\t\tcurrentShipping.current = shippingData;\n\t\tcurrentBilling.current = billing;\n\t}, [shippingData, billing]);\n\n\tuseEffect(() => {\n\t\tif (stripe) {\n\t\t\tconst options = {\n\t\t\t\tcountry: getData('countryCode'),\n\t\t\t\tcurrency: currency?.code.toLowerCase(),\n\t\t\t\ttotal: {\n\t\t\t\t\tamount: cartTotal.value,\n\t\t\t\t\tlabel: cartTotal.label,\n\t\t\t\t\tpending: true\n\t\t\t\t},\n\t\t\t\trequestPayerName: true,\n\t\t\t\trequestPayerEmail: isFieldRequired('email', billingData.country),\n\t\t\t\trequestPayerPhone: isFieldRequired(needsShipping ? 'shipping-phone' : 'phone', billingData.country),\n\t\t\t\trequestShipping: needsShipping,\n\t\t\t\tdisplayItems: getDisplayItems(cartTotalItems, currency)\n\t\t\t}\n\t\t\tif (options.requestShipping) {\n\t\t\t\toptions.shippingOptions = getShippingOptions(shippingRates);\n\t\t\t}\n\t\t\tpaymentRequestOptions.current = options;\n\t\t\tconst paymentRequest = stripe.paymentRequest(paymentRequestOptions.current);\n\t\t\tpaymentRequest.canMakePayment().then(result => {\n\t\t\t\tif (canPay(result)) {\n\t\t\t\t\tsetPaymentRequest(paymentRequest);\n\t\t\t\t} else {\n\t\t\t\t\tsetPaymentRequest(null);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, [\n\t\tstripe,\n\t\tcartTotal.value,\n\t\tbillingData.country,\n\t\tshippingRates,\n\t\tcartTotalItems,\n\t\tcurrency.code\n\t]);\n\n\tconst onShippingAddressChange = useCallback(event => {\n\t\tconst shipping = currentShipping.current;\n\t\tconst {shippingAddress} = event;\n\t\tconst intermediateAddress = toCartAddress(shippingAddress);\n\t\tapiFetch({\n\t\t\tmethod: 'POST',\n\t\t\turl: getRoute('shipping-address'),\n\t\t\tdata: {\n\t\t\t\taddress: intermediateAddress,\n\t\t\t\tpayment_method: getData('name'),\n\t\t\t\tpage_id: 'checkout'\n\t\t\t}\n\t\t}).then(response => {\n\t\t\tevent.updateWith(response.data.newData);\n\t\t\tshipping.setShippingAddress({...shipping.shippingAddress, ...intermediateAddress});\n\t\t}).catch(error => {\n\t\t\tconsole.log(error);\n\t\t})\n\t}, []);\n\n\n\tconst onShippingOptionChange = useCallback(event => {\n\t\tconst {shippingOption} = event;\n\t\tconst shipping = currentShipping.current;\n\n\t\tapiFetch({\n\t\t\tmethod: 'POST',\n\t\t\turl: getRoute('shipping-method'),\n\t\t\tdata: {\n\t\t\t\tshipping_method: shippingOption.id,\n\t\t\t\tpayment_method: getData('name'),\n\t\t\t\tpage_id: null\n\t\t\t}\n\t\t}).then(response => {\n\t\t\tevent.updateWith(response.data.newData);\n\t\t\tshipping.setSelectedRates(...getSelectedShippingOption(shippingOption.id))\n\t\t}).catch(error => {\n\t\t\tconsole.log(error);\n\t\t})\n\t}, []);\n\n\tconst onPaymentMethodReceived = useCallback((paymentResponse) => {\n\t\tconst {paymentMethod, payerName = null, payerEmail = null, payerPhone = null} = paymentResponse;\n\t\t// set address data\n\t\tlet billingData = {payerName, payerEmail, payerPhone};\n\t\tif (paymentMethod?.billing_details.address) {\n\t\t\tbillingData = toCartAddress(paymentMethod.billing_details.address, billingData);\n\t\t}\n\t\texportedValues.billingData = billingData;\n\n\t\tif (paymentResponse.shippingAddress) {\n\t\t\texportedValues.shippingAddress = toCartAddress(paymentResponse.shippingAddress, {payerPhone});\n\t\t}\n\n\t\t// set payment method\n\t\tsetPaymentMethod(paymentMethod.id);\n\t\tpaymentResponse.complete(\"success\");\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (paymentRequest) {\n\t\t\tif (paymentRequestOptions.current.requestShipping) {\n\t\t\t\tpaymentRequest.on('shippingaddresschange', onShippingAddressChange);\n\t\t\t\tpaymentRequest.on('shippingoptionchange', onShippingOptionChange);\n\t\t\t}\n\t\t\tpaymentRequest.on('cancel', onClose);\n\t\t\tpaymentRequest.on('paymentmethod', onPaymentMethodReceived);\n\t\t}\n\t}, [\n\t\tonClose,\n\t\tpaymentRequest,\n\t\tonShippingAddressChange,\n\t\tonPaymentMethodReceived\n\t]);\n\n\treturn {paymentRequest};\n}","import {useEffect, useState, useCallback, useRef} from '@wordpress/element';\nimport {useStripe} from '@stripe/react-stripe-js';\nimport {\n\tgetSettings,\n\tensureSuccessResponse,\n\tensureErrorResponse,\n\tgetBillingDetailsFromAddress,\n\tStripeError,\n\tDEFAULT_BILLING_ADDRESS,\n\tDEFAULT_SHIPPING_ADDRESS\n} from '../util';\n\nconst generalData = getSettings('stripeGeneralData');\n\nexport const useProcessPaymentIntent = (\n\t{\n\t\tgetData,\n\t\tbilling,\n\t\tshippingData,\n\t\tonPaymentProcessing,\n\t\temitResponse,\n\t\terror,\n\t\tonSubmit,\n\t\tactivePaymentMethod,\n\t\tpaymentType = 'card',\n\t\tsetupIntent = null,\n\t\tremoveSetupIntent = null,\n\t\tshouldSavePayment = false,\n\t\texportedValues = {},\n\t\tgetPaymentMethodArgs = () => ({})\n\t}) => {\n\tconst {billingData} = billing;\n\tconst {shippingAddress} = shippingData;\n\tconst {responseTypes} = emitResponse;\n\tconst [paymentMethod, setPaymentMethod] = useState(null);\n\tconst stripe = useStripe();\n\tconst currentPaymentMethodArgs = useRef(getPaymentMethodArgs);\n\tconst paymentMethodData = useRef({});\n\tuseEffect(() => {\n\t\tcurrentPaymentMethodArgs.current = getPaymentMethodArgs;\n\t}, [getPaymentMethodArgs]);\n\n\tconst addPaymentMethodData = useCallback((data) => {\n\t\tpaymentMethodData.current = {...paymentMethodData.current, ...data};\n\t}, []);\n\n\tconst getCreatePaymentMethodArgs = useCallback(() => {\n\t\tconst args = {\n\t\t\ttype: paymentType,\n\t\t\tbilling_details: getBillingDetailsFromAddress(exportedValues?.billingData ? exportedValues.billingData : billingData)\n\t\t}\n\t\treturn {...args, ...currentPaymentMethodArgs.current()};\n\t}, [billingData, paymentType, getPaymentMethodArgs]);\n\n\tconst getSuccessResponse = useCallback((paymentMethodId, shouldSavePayment) => {\n\t\tconst response = {\n\t\t\tmeta: {\n\t\t\t\tpaymentMethodData: {\n\t\t\t\t\t[`${getData('name')}_token_key`]: paymentMethodId,\n\t\t\t\t\t[`${getData('name')}_save_source_key`]: shouldSavePayment,\n\t\t\t\t\t...paymentMethodData.current\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst isOlderVersion = generalData('isOlderVersion');\n\t\tif (exportedValues?.billingData) {\n\t\t\tif (isOlderVersion) {\n\t\t\t\tresponse.meta.billingData = {\n\t\t\t\t\t...DEFAULT_BILLING_ADDRESS,\n\t\t\t\t\t...exportedValues.billingData\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tresponse.meta.billingAddress = {\n\t\t\t\t\t...DEFAULT_BILLING_ADDRESS,\n\t\t\t\t\t...exportedValues.billingData\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tif (exportedValues?.shippingAddress) {\n\t\t\tif (isOlderVersion) {\n\t\t\t\tresponse.meta.shippingData = {address: exportedValues.shippingAddress};\n\t\t\t} else {\n\t\t\t\tresponse.meta.shippingAddress = {\n\t\t\t\t\t...DEFAULT_SHIPPING_ADDRESS, ...exportedValues.shippingAddress\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn response;\n\t}, [billingData, shippingAddress]);\n\n\tuseEffect(() => {\n\t\tif (paymentMethod && typeof paymentMethod === 'string') {\n\t\t\tonSubmit();\n\t\t}\n\t}, [paymentMethod, onSubmit]);\n\n\tuseEffect(() => {\n\t\tconst unsubscribeProcessingPayment = onPaymentProcessing(async () => {\n\t\t\tif (activePaymentMethod !== getData('name')) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tlet [result, paymentMethodId] = [null, null];\n\t\t\ttry {\n\t\t\t\tif (error) {\n\t\t\t\t\tthrow new StripeError(error);\n\t\t\t\t}\n\t\t\t\tif (setupIntent) {\n\t\t\t\t\tresult = await stripe.confirmCardSetup(setupIntent.client_secret, {\n\t\t\t\t\t\tpayment_method: getCreatePaymentMethodArgs()\n\t\t\t\t\t});\n\t\t\t\t\tif (result.error) {\n\t\t\t\t\t\tthrow new StripeError(result.error);\n\t\t\t\t\t}\n\t\t\t\t\tpaymentMethodId = result.setupIntent.payment_method;\n\t\t\t\t\tremoveSetupIntent();\n\t\t\t\t} else {\n\t\t\t\t\t// payment method has already been created.\n\t\t\t\t\tif (paymentMethod) {\n\t\t\t\t\t\tpaymentMethodId = paymentMethod;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//create the payment method\n\t\t\t\t\t\tresult = await stripe.createPaymentMethod(getCreatePaymentMethodArgs());\n\t\t\t\t\t\tif (result.error) {\n\t\t\t\t\t\t\tthrow new StripeError(result.error);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpaymentMethodId = result.paymentMethod.id;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn ensureSuccessResponse(responseTypes, getSuccessResponse(paymentMethodId, shouldSavePayment));\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e);\n\t\t\t\tsetPaymentMethod(null);\n\t\t\t\treturn ensureErrorResponse(responseTypes, e.error);\n\t\t\t}\n\n\t\t});\n\t\treturn () => unsubscribeProcessingPayment();\n\t}, [\n\t\tpaymentMethod,\n\t\tbillingData,\n\t\tonPaymentProcessing,\n\t\tstripe,\n\t\tsetupIntent,\n\t\tactivePaymentMethod,\n\t\tshouldSavePayment\n\t]);\n\treturn {\n\t\tsetPaymentMethod,\n\t\tgetCreatePaymentMethodArgs,\n\t\taddPaymentMethodData\n\t};\n}"],"names":["mapToCartAddress","getSettings"],"sourceRoot":""}